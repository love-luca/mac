//
//  TestCard.m
//  dal-plugin
//
//  Created by John Boiles  on 5/8/20.
//

#import "TestCard.h"

#import <AppKit/AppKit.h>

// This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
// http://www.paintcodeapp.com

void DrawTestCardWithFrame(CGContextRef context, NSRect frame)
{
    if (context == NULL) {
        context = NSGraphicsContext.currentContext.CGContext;
    }

    //// Color Declarations
    NSColor* fillColor = [NSColor colorWithRed: 0.125 green: 0.176 blue: 0.435 alpha: 1];
    NSColor* fillColor2 = [NSColor colorWithRed: 0.086 green: 0.141 blue: 0.345 alpha: 1];
    NSColor* fillColor3 = [NSColor colorWithRed: 0.047 green: 0.086 blue: 0.2 alpha: 1];
    NSColor* strokeColor = [NSColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    NSColor* fillColor4 = [NSColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.62];
    NSColor* fillColor5 = [NSColor colorWithRed: 0.188 green: 0.18 blue: 0.192 alpha: 1];
    NSColor* fillColor6 = [NSColor colorWithRed: 0.769 green: 0.761 blue: 0.769 alpha: 1];
    NSColor* textForeground = [NSColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    NSColor* fillColor7 = [NSColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    NSColor* fillColor8 = [NSColor colorWithRed: 0 green: 0 blue: 0.753 alpha: 1];
    NSColor* fillColor9 = [NSColor colorWithRed: 0 green: 0.753 blue: 0 alpha: 1];
    NSColor* fillColor10 = [NSColor colorWithRed: 0.753 green: 0 blue: 0 alpha: 1];


    //// Subframes
    NSRect bKG = NSMakeRect(NSMinX(frame), NSMinY(frame), frame.size.width, frame.size.height);
    NSRect center = NSMakeRect(NSMinX(frame) + floor(frame.size.width * 0.29199 - 0.25) + 0.75, NSMinY(frame) + floor(frame.size.height * 0.12917 + 0.5), floor(frame.size.width * 0.70840 - 0.25) - floor(frame.size.width * 0.29199 - 0.25), floor(frame.size.height * 0.86944 + 0.5) - floor(frame.size.height * 0.12917 + 0.5));
    NSRect regularText = NSMakeRect(NSMinX(frame) + floor(frame.size.width * 0.03191 - 0.34) + 0.84, NSMinY(frame) + floor(frame.size.height * 0.21799 - 0.45) + 0.95, floor(frame.size.width * 0.24615 + 0.43) - floor(frame.size.width * 0.03191 - 0.34) - 0.77, floor(frame.size.height * 0.70761 + 0.02) - floor(frame.size.height * 0.21799 - 0.45) - 0.47);
    NSRect layer_11 = NSMakeRect(NSMinX(frame) + 1.75, NSMinY(frame) + 0.04, frame.size.width - 7.79, frame.size.height - 1.08);
    NSRect rGB = NSMakeRect(NSMinX(frame), NSMinY(frame) - 0.98, floor((frame.size.width) * 0.03223 + 0.24) + 0.26, floor((frame.size.height + 0.98) * 0.02185 - 1.25) + 1.75);


    //// BKG
    {
        //// Rectangle Drawing
        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(bKG) + floor(bKG.size.width * 0.00000 + 0.5), NSMinY(bKG) + floor(bKG.size.height * 0.00000 + 0.5), floor(bKG.size.width * 1.00000 + 0.5) - floor(bKG.size.width * 0.00000 + 0.5), floor(bKG.size.height * 0.24874 + 0.41) - floor(bKG.size.height * 0.00000 + 0.5) + 0.09)];
        [fillColor setFill];
        [rectanglePath fill];


        //// Rectangle 2 Drawing
        NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(bKG) + floor(bKG.size.width * 0.00000 + 0.5), NSMinY(bKG) + floor(bKG.size.height * 0.24874 + 0.41) + 0.09, floor(bKG.size.width * 1.00000 + 0.5) - floor(bKG.size.width * 0.00000 + 0.5), floor(bKG.size.height * 1.00000 + 0.5) - floor(bKG.size.height * 0.24874 + 0.41) - 0.09)];
        [fillColor setFill];
        [rectangle2Path fill];


        //// Bezier Drawing
        NSBezierPath* bezierPath = [NSBezierPath bezierPath];
        [bezierPath moveToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.49645 * bKG.size.height)];
        [bezierPath curveToPoint: NSMakePoint(NSMinX(bKG) + 0.71753 * bKG.size.width, NSMinY(bKG) + 0.62275 * bKG.size.height) controlPoint1: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.48916 * bKG.size.height) controlPoint2: NSMakePoint(NSMinX(bKG) + 0.71753 * bKG.size.width, NSMinY(bKG) + 0.62275 * bKG.size.height)];
        [bezierPath curveToPoint: NSMakePoint(NSMinX(bKG) + 0.00000 * bKG.size.width, NSMinY(bKG) + 0.28446 * bKG.size.height) controlPoint1: NSMakePoint(NSMinX(bKG) + 0.71753 * bKG.size.width, NSMinY(bKG) + 0.62275 * bKG.size.height) controlPoint2: NSMakePoint(NSMinX(bKG) + 0.15141 * bKG.size.width, NSMinY(bKG) + 0.36204 * bKG.size.height)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(bKG) + 0.00000 * bKG.size.width, NSMinY(bKG) + 0.24823 * bKG.size.height)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.24823 * bKG.size.height)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.49645 * bKG.size.height)];
        [bezierPath closePath];
        [fillColor2 setFill];
        [bezierPath fill];


        //// Bezier 2 Drawing
        NSBezierPath* bezier2Path = [NSBezierPath bezierPath];
        [bezier2Path moveToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.49645 * bKG.size.height)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 1.00000 * bKG.size.height)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(bKG) + 0.00000 * bKG.size.width, NSMinY(bKG) + 1.00000 * bKG.size.height)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(bKG) + 0.00000 * bKG.size.width, NSMinY(bKG) + 0.78019 * bKG.size.height)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(bKG) + 1.00000 * bKG.size.width, NSMinY(bKG) + 0.49645 * bKG.size.height)];
        [bezier2Path closePath];
        [fillColor3 setFill];
        [bezier2Path fill];
    }


    //// Center
    {
        //// Oval Drawing
        NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(NSMinX(center) + floor(center.size.width * 0.00000 + 0.5), NSMinY(center) + floor(center.size.height * 0.00000 + 0.5), floor(center.size.width * 1.00000 + 0.5) - floor(center.size.width * 0.00000 + 0.5), floor(center.size.height * 1.00000 + 0.5) - floor(center.size.height * 0.00000 + 0.5))];
        [fillColor4 setFill];
        [ovalPath fill];
        [strokeColor setStroke];
        ovalPath.lineWidth = 2;
        [ovalPath stroke];


        //// Rectangle 3 Drawing
        NSBezierPath* rectangle3Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(center) + floor(center.size.width * 0.15572 + 0.5), NSMinY(center) + floor(center.size.height * 0.15572 + 0.5), floor(center.size.width * 0.84428 + 0.5) - floor(center.size.width * 0.15572 + 0.5), floor(center.size.height * 0.84428 + 0.5) - floor(center.size.height * 0.15572 + 0.5))];
        [strokeColor setStroke];
        rectangle3Path.lineWidth = 2;
        [rectangle3Path stroke];


        //// Oval 2 Drawing
        NSBezierPath* oval2Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(NSMinX(center) + floor(center.size.width * 0.37715 + 0.48) + 0.02, NSMinY(center) + floor(center.size.height * 0.37715 + 0.48) + 0.02, floor(center.size.width * 0.62285 - 0.48) - floor(center.size.width * 0.37715 + 0.48) + 0.96, floor(center.size.height * 0.62285 - 0.48) - floor(center.size.height * 0.37715 + 0.48) + 0.96)];
        [fillColor5 setFill];
        [oval2Path fill];
        [strokeColor setStroke];
        oval2Path.lineWidth = 3.47;
        [oval2Path stroke];


        //// Bezier 3 Drawing
        NSBezierPath* bezier3Path = [NSBezierPath bezierPath];
        [bezier3Path moveToPoint: NSMakePoint(NSMinX(center) + 0.43774 * center.size.width, NSMinY(center) + 0.43569 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.43777 * center.size.width, NSMinY(center) + 0.43553 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.47053 * center.size.width, NSMinY(center) + 0.39283 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.44169 * center.size.width, NSMinY(center) + 0.41708 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.45373 * center.size.width, NSMinY(center) + 0.40139 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.46134 * center.size.width, NSMinY(center) + 0.40126 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.46749 * center.size.width, NSMinY(center) + 0.39584 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.46401 * center.size.width, NSMinY(center) + 0.39809 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.46106 * center.size.width, NSMinY(center) + 0.40157 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.44863 * center.size.width, NSMinY(center) + 0.44638 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.45011 * center.size.width, NSMinY(center) + 0.41373 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.44551 * center.size.width, NSMinY(center) + 0.43032 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.49915 * center.size.width, NSMinY(center) + 0.48885 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.45226 * center.size.width, NSMinY(center) + 0.46965 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.47476 * center.size.width, NSMinY(center) + 0.48919 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.54568 * center.size.width, NSMinY(center) + 0.46244 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.51803 * center.size.width, NSMinY(center) + 0.48969 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.53644 * center.size.width, NSMinY(center) + 0.47885 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.54557 * center.size.width, NSMinY(center) + 0.46243 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.59607 * center.size.width, NSMinY(center) + 0.48985 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.56578 * center.size.width, NSMinY(center) + 0.46314 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.58447 * center.size.width, NSMinY(center) + 0.47329 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.60657 * center.size.width, NSMinY(center) + 0.51871 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.60175 * center.size.width, NSMinY(center) + 0.49825 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.60626 * center.size.width, NSMinY(center) + 0.50827 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.60649 * center.size.width, NSMinY(center) + 0.51837 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.58067 * center.size.width, NSMinY(center) + 0.48533 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.60272 * center.size.width, NSMinY(center) + 0.50431 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.59340 * center.size.width, NSMinY(center) + 0.49239 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.58087 * center.size.width, NSMinY(center) + 0.48544 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.50993 * center.size.width, NSMinY(center) + 0.50579 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.55566 * center.size.width, NSMinY(center) + 0.47147 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.52390 * center.size.width, NSMinY(center) + 0.48058 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.50541 * center.size.width, NSMinY(center) + 0.51670 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.50801 * center.size.width, NSMinY(center) + 0.50924 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.50649 * center.size.width, NSMinY(center) + 0.51291 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.50550 * center.size.width, NSMinY(center) + 0.51637 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.50977 * center.size.width, NSMinY(center) + 0.55699 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.50161 * center.size.width, NSMinY(center) + 0.52995 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.50314 * center.size.width, NSMinY(center) + 0.54451 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.50940 * center.size.width, NSMinY(center) + 0.55691 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.46769 * center.size.width, NSMinY(center) + 0.58611 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.50026 * center.size.width, NSMinY(center) + 0.57211 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.48510 * center.size.width, NSMinY(center) + 0.58273 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.42781 * center.size.width, NSMinY(center) + 0.58115 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.45419 * center.size.width, NSMinY(center) + 0.58894 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.44020 * center.size.width, NSMinY(center) + 0.58679 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.46195 * center.size.width, NSMinY(center) + 0.58102 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.43890 * center.size.width, NSMinY(center) + 0.58437 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.45094 * center.size.width, NSMinY(center) + 0.58490 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.46219 * center.size.width, NSMinY(center) + 0.58094 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.49448 * center.size.width, NSMinY(center) + 0.54921 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.47719 * center.size.width, NSMinY(center) + 0.57578 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.48905 * center.size.width, NSMinY(center) + 0.56412 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.48799 * center.size.width, NSMinY(center) + 0.50104 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.50027 * center.size.width, NSMinY(center) + 0.53367 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.49801 * center.size.width, NSMinY(center) + 0.51472 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.48819 * center.size.width, NSMinY(center) + 0.50132 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.45603 * center.size.width, NSMinY(center) + 0.48003 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.48055 * center.size.width, NSMinY(center) + 0.49041 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.46906 * center.size.width, NSMinY(center) + 0.48280 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.44359 * center.size.width, NSMinY(center) + 0.47857 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.45180 * center.size.width, NSMinY(center) + 0.47927 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.44769 * center.size.width, NSMinY(center) + 0.47895 * center.size.height)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(center) + 0.43794 * center.size.width, NSMinY(center) + 0.43581 * center.size.height) controlPoint1: NSMakePoint(NSMinX(center) + 0.43705 * center.size.width, NSMinY(center) + 0.46540 * center.size.height) controlPoint2: NSMakePoint(NSMinX(center) + 0.43465 * center.size.width, NSMinY(center) + 0.45011 * center.size.height)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(center) + 0.43774 * center.size.width, NSMinY(center) + 0.43569 * center.size.height)];
        [bezier3Path closePath];
        [fillColor6 setFill];
        [bezier3Path fill];
    }


    //// MirroredText
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, NSMinX(frame) + 0.96069 * frame.size.width, NSMinY(frame) + 0.21660 * frame.size.height);
        CGContextScaleCTM(context, -1, 1);



        //// Label Drawing
        NSRect labelRect = NSMakeRect(0, 121.53, 264.59, 40);
        NSMutableParagraphStyle* labelStyle = [[NSMutableParagraphStyle alloc] init];
        labelStyle.alignment = NSTextAlignmentLeft;
        NSDictionary* labelFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: labelStyle};

        [@"OBS Virtual Cam " drawInRect: NSOffsetRect(labelRect, 0, 0) withAttributes: labelFontAttributes];


        //// Label 2 Drawing
        NSRect label2Rect = NSMakeRect(0, 160.13, 264.68, 40);
        NSMutableParagraphStyle* label2Style = [[NSMutableParagraphStyle alloc] init];
        label2Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label2FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label2Style};

        [@"is inactive." drawInRect: NSOffsetRect(label2Rect, 0, 0) withAttributes: label2FontAttributes];


        //// Label 3 Drawing
        NSRect label3Rect = NSMakeRect(0, 237.33, 245.51, 39);
        NSMutableParagraphStyle* label3Style = [[NSMutableParagraphStyle alloc] init];
        label3Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label3FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label3Style};

        [@"Choose Tools > " drawInRect: NSOffsetRect(label3Rect, 0, 0) withAttributes: label3FontAttributes];


        //// Label 4 Drawing
        NSRect label4Rect = NSMakeRect(0, 275.93, 269.53, 39);
        NSMutableParagraphStyle* label4Style = [[NSMutableParagraphStyle alloc] init];
        label4Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label4FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label4Style};

        [@"Start/Stop Virtual " drawInRect: NSOffsetRect(label4Rect, 0, 0) withAttributes: label4FontAttributes];


        //// Label 5 Drawing
        NSRect label5Rect = NSMakeRect(0, 314.53, 126.45, 39);
        NSMutableParagraphStyle* label5Style = [[NSMutableParagraphStyle alloc] init];
        label5Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label5FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label5Style};

        [@"Camera." drawInRect: NSOffsetRect(label5Rect, 0, 0) withAttributes: label5FontAttributes];


        //// Label 6 Drawing
        NSRect label6Rect = NSMakeRect(0, 0, 296.53, 81);
        NSMutableParagraphStyle* label6Style = [[NSMutableParagraphStyle alloc] init];
        label6Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label6FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 66], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label6Style};

        [@"Mirrorred" drawInRect: NSOffsetRect(label6Rect, 0, 0) withAttributes: label6FontAttributes];



        [NSGraphicsContext restoreGraphicsState];
    }


    //// RegularText
    {
        //// Label 7 Drawing
        NSRect label7Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.01714 - 0.2) + 0.7, NSMinY(regularText) + floor(regularText.size.height * 0.34474 - 0.03) + 0.53, floor(regularText.size.width * 0.98197 + 0.21) - floor(regularText.size.width * 0.01714 - 0.2) - 0.41, floor(regularText.size.height * 0.45820 - 0.03) - floor(regularText.size.height * 0.34474 - 0.03));
        NSMutableParagraphStyle* label7Style = [[NSMutableParagraphStyle alloc] init];
        label7Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label7FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label7Style};

        [@"OBS Virtual Cam " drawInRect: NSOffsetRect(label7Rect, 0, 0) withAttributes: label7FontAttributes];


        //// Label 8 Drawing
        NSRect label8Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.01714 - 0.2) + 0.7, NSMinY(regularText) + floor(regularText.size.height * 0.45423 + 0.37) + 0.13, floor(regularText.size.width * 0.99974 + 0.34) - floor(regularText.size.width * 0.01714 - 0.2) - 0.54, floor(regularText.size.height * 0.56486 + 0.37) - floor(regularText.size.height * 0.45423 + 0.37));
        NSMutableParagraphStyle* label8Style = [[NSMutableParagraphStyle alloc] init];
        label8Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label8FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label8Style};

        [@"is inactive." drawInRect: NSOffsetRect(label8Rect, 0, 0) withAttributes: label8FontAttributes];


        //// Label 9 Drawing
        NSRect label9Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.01714 - 0.2) + 0.7, NSMinY(regularText) + floor(regularText.size.height * 0.67038 + 0.17) + 0.33, floor(regularText.size.width * 0.91240 + 0.29) - floor(regularText.size.width * 0.01714 - 0.2) - 0.49, floor(regularText.size.height * 0.78101 + 0.17) - floor(regularText.size.height * 0.67038 + 0.17));
        NSMutableParagraphStyle* label9Style = [[NSMutableParagraphStyle alloc] init];
        label9Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label9FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label9Style};

        [@"Choose Tools > " drawInRect: NSOffsetRect(label9Rect, 0, 0) withAttributes: label9FontAttributes];


        //// Label 10 Drawing
        NSRect label10Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.01714 - 0.2) + 0.7, NSMinY(regularText) + floor(regularText.size.height * 0.77988 - 0.43) + 0.93, floor(regularText.size.width * 1.00000 + 0.27) - floor(regularText.size.width * 0.01714 - 0.2) - 0.47, floor(regularText.size.height * 0.89051 - 0.43) - floor(regularText.size.height * 0.77988 - 0.43));
        NSMutableParagraphStyle* label10Style = [[NSMutableParagraphStyle alloc] init];
        label10Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label10FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label10Style};

        [@"Start/Stop Virtual " drawInRect: NSOffsetRect(label10Rect, 0, 0) withAttributes: label10FontAttributes];


        //// Label 11 Drawing
        NSRect label11Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.01714 - 0.2) + 0.7, NSMinY(regularText) + floor(regularText.size.height * 0.88937 - 0.03) + 0.53, floor(regularText.size.width * 0.47823 + 0.35) - floor(regularText.size.width * 0.01714 - 0.2) - 0.55, floor(regularText.size.height * 1.00000 - 0.03) - floor(regularText.size.height * 0.88937 - 0.03));
        NSMutableParagraphStyle* label11Style = [[NSMutableParagraphStyle alloc] init];
        label11Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label11FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 32], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label11Style};

        [@"Camera." drawInRect: NSOffsetRect(label11Rect, 0, 0) withAttributes: label11FontAttributes];


        //// Label 12 Drawing
        NSRect label12Rect = NSMakeRect(NSMinX(regularText) + floor(regularText.size.width * 0.00000 + 0.5), NSMinY(regularText) + floor(regularText.size.height * 0.00000 + 0.5), floor(regularText.size.width * 0.90549 + 0.19) - floor(regularText.size.width * 0.00000 + 0.5) + 0.31, floor(regularText.size.height * 0.22977 + 0.5) - floor(regularText.size.height * 0.00000 + 0.5));
        NSMutableParagraphStyle* label12Style = [[NSMutableParagraphStyle alloc] init];
        label12Style.alignment = NSTextAlignmentLeft;
        NSDictionary* label12FontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica-Bold" size: 66], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label12Style};

        [@"Regular" drawInRect: NSOffsetRect(label12Rect, 0, 0) withAttributes: label12FontAttributes];
    }


    //// Layer_11
    {
        //// Bezier 4 Drawing
        NSBezierPath* bezier4Path = [NSBezierPath bezierPath];
        [bezier4Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04885 * layer_11.size.width, NSMinY(layer_11) + 0.92436 * layer_11.size.height)];
        [bezier4Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.05471 * layer_11.size.width, NSMinY(layer_11) + 0.91388 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.05281 * layer_11.size.width, NSMinY(layer_11) + 0.92223 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.05351 * layer_11.size.width, NSMinY(layer_11) + 0.92098 * layer_11.size.height)];
        [bezier4Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.07343 * layer_11.size.width, NSMinY(layer_11) + 0.91388 * layer_11.size.height)];
        [bezier4Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.04913 * layer_11.size.width, NSMinY(layer_11) + 1.00000 * layer_11.size.height)];
        [bezier4Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.04885 * layer_11.size.width, NSMinY(layer_11) + 0.99988 * layer_11.size.height)];
        [bezier4Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.04885 * layer_11.size.width, NSMinY(layer_11) + 0.92436 * layer_11.size.height)];
        [bezier4Path closePath];
        [fillColor7 setFill];
        [bezier4Path fill];


        //// Bezier 5 Drawing
        NSBezierPath* bezier5Path = [NSBezierPath bezierPath];
        [bezier5Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 0.00000 * layer_11.size.width, NSMinY(layer_11) + 0.91299 * layer_11.size.height)];
        [bezier5Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.04858 * layer_11.size.width, NSMinY(layer_11) + 0.86993 * layer_11.size.height)];
        [bezier5Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.04858 * layer_11.size.width, NSMinY(layer_11) + 0.90334 * layer_11.size.height)];
        [bezier5Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04279 * layer_11.size.width, NSMinY(layer_11) + 0.91366 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.04519 * layer_11.size.width, NSMinY(layer_11) + 0.90410 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.04322 * layer_11.size.width, NSMinY(layer_11) + 0.90759 * layer_11.size.height)];
        [bezier5Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.00011 * layer_11.size.width, NSMinY(layer_11) + 0.91366 * layer_11.size.height)];
        [bezier5Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.00000 * layer_11.size.width, NSMinY(layer_11) + 0.91299 * layer_11.size.height)];
        [bezier5Path closePath];
        [fillColor7 setFill];
        [bezier5Path fill];


        //// Bezier 6 Drawing
        NSBezierPath* bezier6Path = [NSBezierPath bezierPath];
        [bezier6Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04864 * layer_11.size.width, NSMinY(layer_11) + 0.90929 * layer_11.size.height)];
        [bezier6Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.05112 * layer_11.size.width, NSMinY(layer_11) + 0.91367 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.05011 * layer_11.size.width, NSMinY(layer_11) + 0.90960 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.05112 * layer_11.size.width, NSMinY(layer_11) + 0.91097 * layer_11.size.height)];
        [bezier6Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.05112 * layer_11.size.width, NSMinY(layer_11) + 0.91371 * layer_11.size.height)];
        [bezier6Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04865 * layer_11.size.width, NSMinY(layer_11) + 0.91794 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.05110 * layer_11.size.width, NSMinY(layer_11) + 0.91608 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.04999 * layer_11.size.width, NSMinY(layer_11) + 0.91798 * layer_11.size.height)];
        [bezier6Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04627 * layer_11.size.width, NSMinY(layer_11) + 0.91386 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.04738 * layer_11.size.width, NSMinY(layer_11) + 0.91790 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.04633 * layer_11.size.width, NSMinY(layer_11) + 0.91611 * layer_11.size.height)];
        [bezier6Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.04864 * layer_11.size.width, NSMinY(layer_11) + 0.90929 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.04620 * layer_11.size.width, NSMinY(layer_11) + 0.91123 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.04716 * layer_11.size.width, NSMinY(layer_11) + 0.90979 * layer_11.size.height)];
        [bezier6Path closePath];
        [fillColor7 setFill];
        [bezier6Path fill];


        //// Bezier 7 Drawing
        NSBezierPath* bezier7Path = [NSBezierPath bezierPath];
        [bezier7Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95115 * layer_11.size.width, NSMinY(layer_11) + 0.07564 * layer_11.size.height)];
        [bezier7Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.94529 * layer_11.size.width, NSMinY(layer_11) + 0.08612 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.94719 * layer_11.size.width, NSMinY(layer_11) + 0.07777 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.94649 * layer_11.size.width, NSMinY(layer_11) + 0.07902 * layer_11.size.height)];
        [bezier7Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.92657 * layer_11.size.width, NSMinY(layer_11) + 0.08612 * layer_11.size.height)];
        [bezier7Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.95087 * layer_11.size.width, NSMinY(layer_11) + 0.00000 * layer_11.size.height)];
        [bezier7Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.95115 * layer_11.size.width, NSMinY(layer_11) + 0.00011 * layer_11.size.height)];
        [bezier7Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.95115 * layer_11.size.width, NSMinY(layer_11) + 0.07564 * layer_11.size.height)];
        [bezier7Path closePath];
        [fillColor7 setFill];
        [bezier7Path fill];


        //// Bezier 8 Drawing
        NSBezierPath* bezier8Path = [NSBezierPath bezierPath];
        [bezier8Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 1.00000 * layer_11.size.width, NSMinY(layer_11) + 0.08701 * layer_11.size.height)];
        [bezier8Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.95142 * layer_11.size.width, NSMinY(layer_11) + 0.13008 * layer_11.size.height)];
        [bezier8Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.95142 * layer_11.size.width, NSMinY(layer_11) + 0.09670 * layer_11.size.height)];
        [bezier8Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95721 * layer_11.size.width, NSMinY(layer_11) + 0.08638 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.95481 * layer_11.size.width, NSMinY(layer_11) + 0.09594 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.95677 * layer_11.size.width, NSMinY(layer_11) + 0.09246 * layer_11.size.height)];
        [bezier8Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.99989 * layer_11.size.width, NSMinY(layer_11) + 0.08638 * layer_11.size.height)];
        [bezier8Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 1.00000 * layer_11.size.width, NSMinY(layer_11) + 0.08701 * layer_11.size.height)];
        [bezier8Path closePath];
        [fillColor7 setFill];
        [bezier8Path fill];


        //// Bezier 9 Drawing
        NSBezierPath* bezier9Path = [NSBezierPath bezierPath];
        [bezier9Path moveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95136 * layer_11.size.width, NSMinY(layer_11) + 0.09071 * layer_11.size.height)];
        [bezier9Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.94888 * layer_11.size.width, NSMinY(layer_11) + 0.08634 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.94989 * layer_11.size.width, NSMinY(layer_11) + 0.09040 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.94888 * layer_11.size.width, NSMinY(layer_11) + 0.08903 * layer_11.size.height)];
        [bezier9Path lineToPoint: NSMakePoint(NSMinX(layer_11) + 0.94888 * layer_11.size.width, NSMinY(layer_11) + 0.08630 * layer_11.size.height)];
        [bezier9Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95135 * layer_11.size.width, NSMinY(layer_11) + 0.08207 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.94890 * layer_11.size.width, NSMinY(layer_11) + 0.08393 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.95001 * layer_11.size.width, NSMinY(layer_11) + 0.08203 * layer_11.size.height)];
        [bezier9Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95373 * layer_11.size.width, NSMinY(layer_11) + 0.08615 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.95262 * layer_11.size.width, NSMinY(layer_11) + 0.08211 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.95367 * layer_11.size.width, NSMinY(layer_11) + 0.08389 * layer_11.size.height)];
        [bezier9Path curveToPoint: NSMakePoint(NSMinX(layer_11) + 0.95136 * layer_11.size.width, NSMinY(layer_11) + 0.09071 * layer_11.size.height) controlPoint1: NSMakePoint(NSMinX(layer_11) + 0.95380 * layer_11.size.width, NSMinY(layer_11) + 0.08877 * layer_11.size.height) controlPoint2: NSMakePoint(NSMinX(layer_11) + 0.95284 * layer_11.size.width, NSMinY(layer_11) + 0.09022 * layer_11.size.height)];
        [bezier9Path closePath];
        [fillColor7 setFill];
        [bezier9Path fill];
    }


    //// RGB
    {
        //// Rectangle 16 Drawing
        NSBezierPath* rectangle16Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(rGB) + floor(rGB.size.width * 0.67475 - 0.34) + 0.84, NSMinY(rGB) + floor(rGB.size.height * 0.00000 + 0.5), floor(rGB.size.width * 1.00000 + 0.24) - floor(rGB.size.width * 0.67475 - 0.34) - 0.58, floor(rGB.size.height * 1.00000 - 0.25) - floor(rGB.size.height * 0.00000 + 0.5) + 0.75)];
        [fillColor8 setFill];
        [rectangle16Path fill];


        //// Rectangle 17 Drawing
        NSBezierPath* rectangle17Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(rGB) + floor(rGB.size.width * 0.32525 + 0.08) + 0.42, NSMinY(rGB) + floor(rGB.size.height * 0.00000 + 0.5), floor(rGB.size.width * 0.67475 - 0.34) - floor(rGB.size.width * 0.32525 + 0.08) + 0.42, floor(rGB.size.height * 1.00000 - 0.25) - floor(rGB.size.height * 0.00000 + 0.5) + 0.75)];
        [fillColor9 setFill];
        [rectangle17Path fill];


        //// Rectangle 18 Drawing
        NSBezierPath* rectangle18Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(rGB) + floor(rGB.size.width * 0.00000 + 0.5), NSMinY(rGB) + floor(rGB.size.height * 0.00000 + 0.5), floor(rGB.size.width * 0.32525 + 0.08) - floor(rGB.size.width * 0.00000 + 0.5) + 0.42, floor(rGB.size.height * 1.00000 - 0.25) - floor(rGB.size.height * 0.00000 + 0.5) + 0.75)];
        [fillColor10 setFill];
        [rectangle18Path fill];
    }
}

void DrawDialWithFrame(NSRect frame, CGFloat rotation)
{
    //// General Declarations
    CGContextRef context = NSGraphicsContext.currentContext.CGContext;

    //// Oval 3 Drawing
    NSBezierPath* oval3Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(NSMinX(frame) + floor(frame.size.width * 0.89609 + 0.5), NSMinY(frame) + floor(frame.size.height * 0.04167 + 0.5), floor(frame.size.width * 0.97266 + 0.5) - floor(frame.size.width * 0.89609 + 0.5), floor(frame.size.height * 0.17778 + 0.5) - floor(frame.size.height * 0.04167 + 0.5))];
    [NSColor.grayColor setFill];
    [oval3Path fill];

    //// Bezier 10 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, NSMinX(frame) + 0.93477 * frame.size.width, NSMinY(frame) + 0.11042 * frame.size.height);
    CGContextRotateCTM(context, rotation * M_PI/180);

    NSBezierPath* bezier10Path = [NSBezierPath bezierPath];
    [bezier10Path moveToPoint: NSMakePoint(-0, 0)];
    [bezier10Path lineToPoint: NSMakePoint(-0, 48)];
    [NSColor.blackColor setStroke];
    bezier10Path.lineWidth = 2;
    [bezier10Path stroke];

    [NSGraphicsContext restoreGraphicsState];
}


NSImage *ImageOfTestCardWithSize(NSSize imageSize)
{
    return [NSImage imageWithSize: imageSize flipped: YES drawingHandler: ^(__unused NSRect dstRect)
    {
        DrawTestCardWithFrame(nil, NSMakeRect(0, 0, imageSize.width, imageSize.height));
        return YES;
    }];
}
